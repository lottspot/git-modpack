#!/usr/bin/env bash
set -e

PROG=$(basename "$0")
CMD=$0
IFS=: binpaths=( $PATH )

if [[ $0 =~ '/' ]]; then
  bindir=$(dirname "$0")
  distbin=$(readlink "$0")
else
  bindir=$(find "${binpaths[@]}" -maxdepth 1 -name "$0" -exec dirname {} \; 2>/dev/null| head -n1)
  distbin=$(readlink "$bindir/$0")
fi

DISTDIR=$(cd "$bindir" && cd "$(dirname "$distbin")/.." && pwd)
BINDIR=$DISTDIR/bin

PATH=$PATH:$BINDIR
binpaths+=("$BINDIR")

PROG_CMDS=( $(find "${binpaths[@]}" -maxdepth 1 -type f -name "$PROG-*" -exec basename {} \; 2>/dev/null| sort -u) )
PROG_OPS=( $(for cmd in "${PROG_CMDS[@]}"; do echo "${cmd#$PROG-}"; done) )

usage_spec="\
git ${PROG#git-} [-h] <command> [<args>]

Develop and package gitconfig fragments and supporting assets for redistribution

Available commands:

$(printf '  %s\n' "${PROG_OPS[@]}")
--
  Global options:
h,help  show the help
version show the version number and exit
"
eval "$(git rev-parse --parseopt --stuck-long --stop-at-non-option -- "$@" <<< "$usage_spec" || echo exit $?)"

input_error()
{
  if [ "$input_errors" ]; then
    input_errors="$input_errors$(printf '\n%s\n' "$1")"
  else
    input_errors="$(printf '%s\n' "$1")"
  fi
}

assert_inputs_valid()
{
  if [ "$input_errors" ]; then
    "$CMD" --help || true
    printf 'fatal: input errors\n' >&2
    printf '%s\n' "$input_errors"  >&2
    exit 1
  fi
}

# Parse options
until [[ $1 == '--' ]]; do
  opt_name=${1%%=*}
  opt_arg=${1#*=}
  case $opt_name in
    --help    ) true;;
    --version ) printf '%s version %s\n' "$PROG" "$(cat "$DISTDIR/VERSION")"; exit 0;;
            * ) input_error "unsupported global option: $opt_name";;
  esac
  shift
done
shift

CALLER_OP_NAME=$1
CALLER_OP_CMD=$PROG-$CALLER_OP_NAME

if [[ $CALLER_OP_NAME ]]; then
  shift
else
  input_error 'not enough arguments'
fi

if [[ $CALLER_OP_NAME ]] && ! type $CALLER_OP_CMD &>/dev/null
then
  input_error "unknown command: $CALLER_OP_NAME"
fi

assert_inputs_valid

export DISTDIR
exec $CALLER_OP_CMD "$@"
