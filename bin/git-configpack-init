#!/usr/bin/env bash
set -e

usage_spec="\
git configpack init [options] [-n|--name] [PATH]

Create skeleton for a new configpack project
--
h,help              show the help
n,name=             package name (defaults to directory name)
p,property=key-val  install property
t,template          convenience option for: -n %pack_name
"

die(){
  printf 'init: fatal: %s\n' "$*" >&2
  exit 1
}

copy_resource()
{
  local name=$1
  local destpath=$2
  local srcpath=$RESOURCE_HOME/$name
  mkdir -p "$(dirname "$destpath")"
  sed                                                  \
    -e "s/%pack_name%/${PROPERTIES['package.name']}/g" \
    -e "s/%pack_version%/$(cat "$DISTDIR/VERSION")/g"  < "$srcpath" > "$destpath"
  if [[ $(find "$srcpath" -prune -perm -00100 2>/dev/null) ]]; then
    chmod +x "$destpath"
  fi
  printf '+ %s\n' "${destpath#$PACK_PATH/}"
}

eval "$(git rev-parse --parseopt --stuck-long -- "$@" <<< "$usage_spec" || echo exit $?)"

if [[ ! $DISTDIR ]]; then
  die 'DISTDIR not provided'
fi

source "$DISTDIR"/share/install.sh

# Parse options
until [[ $1 == '--' ]]; do
  opt_name=${1%%=*}
  opt_arg=${1#*=}
  case $opt_name in
    --name     ) pack_name=$opt_arg;;
    --property ) 
      propkey=${opt_arg%%=*}
      propval=${opt_arg#*=}
      PROPERTIES[$propkey]=$propval
    ;;
  --template  ) pack_is_template=1;;
  esac
  shift
done

shift

# Parse operands
PACK_PATH=${1:-.}

# Program run

PACK_PROPERTIES_PATH=$PACK_PATH/install.properties
RESOURCE_HOME=$DISTDIR/share

declare -A configs=(
  [core]=core.gitconfig
)

declare -A resources=(
  [install.sh]=install.sh
  [docs/help.txt]=help.txt
)

declare -A default_properties=(
  ['package.configsdir']=configs
)

if [[ $pack_name ]]; then
  PROPERTIES['package.name']=$pack_name
fi

if [[ $pack_is_template ]]; then
  PROPERTIES['package.name']=%pack_name%
fi

if [[ ! ${PROPERTIES['package.name']} ]]; then
  PROPERTIES['package.name']=$(default_package_name "$PACK_PATH")
fi

for default_name in "${!default_properties[@]}"; do
  default_val=${default_properties[$default_name]}
  if [[ ! ${PROPERTIES[$default_name]} ]]; then
    PROPERTIES[$default_name]=$default_val
  fi
done

# validate install.mode value
install_mode=${PROPERTIES['install.mode']}
if [[ $install_mode ]]; then
  $RESOURCE_HOME/install.sh --with-property "install.mode=$install_mode" --get-property install.mode >/dev/null
fi

if [[ ! -e $PACK_PROPERTIES_PATH ]]; then
  properties_write "$PACK_PROPERTIES_PATH"
fi

for conf_name in "${!configs[@]}"; do
  resource_name=${configs[$conf_name]}
  package_configsdir=${PROPERTIES['package.configsdir']}

  if [[ $package_configsdir ]]; then
    conf_path=$PACK_PATH/$package_configsdir/$conf_name
  else
    conf_path=$PACK_PATH/$conf_name
  fi

  if [[ ! -e $conf_path ]]; then
    copy_resource "$resource_name" "$conf_path"
  fi
done

for resource_pathleaf in "${!resources[@]}"; do
  resource_name=${resources[$resource_pathleaf]}
  resource_path=$PACK_PATH/$resource_pathleaf
  if [[ ! -e $resource_path ]]; then
    copy_resource "$resource_name" "$resource_path"
  fi
done
